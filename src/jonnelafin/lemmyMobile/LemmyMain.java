package jonnelafin.lemmyMobile;

import com.codename1.charts.util.ColorUtil;
import static com.codename1.ui.CN.*;
import com.codename1.components.SpanLabel;
import com.codename1.io.JSONParser;
import com.codename1.io.websocket.WebSocket;
import com.codename1.ui.Button;
import com.codename1.ui.Component;
import com.codename1.ui.Dialog;
import com.codename1.ui.Form;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.ui.Container;
import com.codename1.ui.EncodedImage;
import com.codename1.ui.Font;
import com.codename1.ui.FontImage;
import com.codename1.ui.Image;
import com.codename1.ui.Label;
import com.codename1.ui.PickerComponent;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextComponent;
import com.codename1.ui.Toolbar;
import com.codename1.ui.URLImage;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.Layout;
import com.codename1.ui.layouts.TextModeLayout;
import com.codename1.ui.plaf.Style;
import com.codename1.ui.validation.GroupConstraint;
import com.codename1.ui.validation.LengthConstraint;
import com.codename1.ui.validation.RegexConstraint;
import com.codename1.ui.validation.Validator;
import com.codename1.ui.geom.Dimension;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;
import static jonnelafin.lemmyMobile.LemmyMain.addCommentCard;
import static jonnelafin.lemmyMobile.LemmyMain.addPostCard;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class LemmyMain {

    public static String host = "dev.lemmy.ml";
    
    private Form current;
    private Resources theme;

    private Form home;
    
    public static Form feed;
    public static Form postView;
    public static Container commentView;
    public static LinkedList<Comment> comments = new LinkedList<>();

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        //Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                //Log.e(err.getError());
            }
            //Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        
        
        
        
        TextModeLayout tm = new TextModeLayout(4, 2);
        home = new Form("Home", new BorderLayout());
        Container content = new Container(tm);
        content.add(tm.createConstraint().horizontalSpan(2), new SpanLabel("Welcome to Lemmy!"));
        
        TextComponent name = new TextComponent().labelAndHint("Server: ");
        int fg = ColorUtil.rgb(255, 255, 255);
        int bg = ColorUtil.rgb(0, 0, 0);
        Style card_style = new Style(fg, bg, Font.getDefaultFont(), Byte.MAX_VALUE);
        name.setUnselectedStyle(card_style);
        name.setSelectedStyle(card_style);
        name.getField().setSelectedStyle(card_style);
        name.getField().setUnselectedStyle(card_style);
        name.getField().setText(host);
        content.add(tm.createConstraint().horizontalSpan(2), name);
        
        

        TextComponent bio = new TextComponent().labelAndHint("Bio").multiline(true).rows(3);
        //content.add(tm.createConstraint().horizontalSpan(2), bio);

        PickerComponent gender = PickerComponent.createStrings("Unspecified", "Male", "Female", "Other").label("Gender");
        //content.add(gender);

        PickerComponent dateOfBirth = PickerComponent.createDate(null).label("Birthday");
        //content.add(dateOfBirth);
        
        content.setScrollableY(true);
                
        Button submit = new Button("Submit");
        FontImage.setMaterialIcon(submit, FontImage.MATERIAL_DONE);
        submit.addActionListener(e -> {
            showFeed(name.getField().getText());
        });
        
        home.add(CENTER, content);
        home.add(SOUTH, submit);
        
        Validator val = new Validator();
        val.setShowErrorMessageForFocusedComponent(true);
//        val.addConstraint(name, 
//                new GroupConstraint(
//                        new LengthConstraint(2), 
//                        new RegexConstraint("^([a-zA-Z ]*)$", "Please only use latin characters for name"))).
//                addSubmitButtons(submit);

        home.show();
        //showFeed("User");
    }
    
    private static void showPost(LinkedHashMap post){
        Layout layout = BoxLayout.y();
        
        //layout.
        Form f = new Form("", layout);
        postView = f;
        String document = "Loading post failed.";
        try {
            document = (String) post.get("body");
        } catch (Exception e) {
            try {
                document = (String) post.get("url");
            } catch (Exception ex) {
                document = "This post has no body.";
            }
        }
        //BrowserComponent bc = new BrowserComponent();
        
        //document = encodeUrl(document);
        
        //String bkn = Base64.encode(document.getBytes());
        //System.out.println("Document: " + document);
        //document = "";
        
        
        //bc.setPage(document, "jar:///js/showPost.html");
        //bc.setURL("jar:///js/showPost.html");
        
        Container commentSortCont = new Container();
        int bg = ColorUtil.rgb(255, 20, 18);
        int fg = ColorUtil.rgb(255, 255, 255);
        Style card_style = new Style(fg, bg, Font.getDefaultFont(), Byte.MAX_VALUE);
        Double commentCount = (Double) post.get("number_of_comments");
        int commentCount2 = (int) Math.round(commentCount);
        //commentSortCont.add(new Label(commentCount2 + " Comments"));
        //commentSortCont.setSelectedStyle(card_style);
        //commentSortCont.setUnselectedStyle(card_style);
        
        Container commentCont = new Container();
        commentView = commentCont;
        System.out.println("Post keyset: " + post.keySet());
        
        
        
        
        Container postC = new Container();
            postC.add(new SpanLabel((String) post.get("name")));
            postC.add(new TextArea(document)); //new TextArea(htmlBody)
            postC.add(new SpanLabel("Post by " + post.get("creator_name")));
            //postC.add(commentSortCont);
        f.add(postC);
        f.add(new Label(commentCount2 + " Comments"));
        f.add(commentCont);
        //f.add()
        //feed = f;
        
        f.getToolbar().setBackCommand("", e -> feed.showBack());
        f.show();
        f.repaint();
        f.refreshTheme();
        
        //Get comments
        int id = (int) Math.round( (Double) post.get("id"));
        
        String url = "wss://" + host + "/api/v1/ws";
        Map<String,Object> arg = new HashMap();
        String op = "GetPost";
        arg.put("op", op);
            Map<String,Object> inpData = new HashMap<>();
            inpData.put("id", id);
//            inpData.put("sort", "TopAll");
            arg.put("data", inpData);
        customSock sock = new customSock(url, arg, op, true);
        sock.connect();
        
    }
    
    private void showFeed(String name) {
        host = name;
        BoxLayout layout = BoxLayout.y();
        //layout.
        Form f = new Form("Feed", layout);
        feed = f;
        
        Toolbar tb = feed.getToolbar();
        
        tb.addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {});
        tb.addMaterialCommandToSideMenu("Website", FontImage.MATERIAL_WEB, e -> {});
        tb.addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {});
        tb.addMaterialCommandToSideMenu("About", FontImage.MATERIAL_INFO, e -> {});
        
        SpanLabel loadInfo = new SpanLabel("Fetching submissions...");
        f.add(loadInfo);
        
        //f.getToolbar().setBackCommand("", e -> home.showBack());
        f.show();
        
        //Load contents
        String url = "wss://" + host + "/api/v1/ws";
        Map<String,Object> arg = new HashMap();
        String op = "GetPosts";
        arg.put("op", op);
            Map<String,String> inpData = new HashMap<>();
            inpData.put("type_", "All");
            inpData.put("sort", "TopAll");
            arg.put("data", inpData);
        customSock sock = new customSock(url, arg, op, true);
        sock.connect();
    }
    
    
    static boolean cardBg = false;
    static int cardCount = 0;
    static LinkedHashMap curr;
    
    protected static void addPostCard(String title, String url, LinkedHashMap raw){
        Layout l = new BorderLayout();
        Container c = new Container(l);
        c.setFocusable(true);
        //c.setDraggable(true);
        //c.setHeight(1050);
        c.setTactileTouch(true);
        c.setRippleEffect(true);
        curr = raw;
        c.addPointerReleasedListener((evt) -> {
            showPost(raw);
        });
        
        int bg = ColorUtil.rgb(0, 0, 0);
        if(cardBg){
            bg = ColorUtil.rgb(25, 25, 25);
        }
        int fg = ColorUtil.rgb(255, 255, 255);
        Style card_style = new Style(fg, bg, Font.getDefaultFont(), Byte.MAX_VALUE);
        c.setSelectedStyle(card_style);
        c.setUnselectedStyle(card_style);
        
        Label icon = new Label("");
        icon.setSelectedStyle(card_style);
        icon.setUnselectedStyle(card_style);
        if (url == null) {
            String imgUrl = (String) raw.get("creator_avatar");
            //System.out.println(imgUrl);
            try {
                EncodedImage p = EncodedImage.createFromImage(Image.createImage(100, 100, 0xffff0000), true);
                URLImage img = URLImage.createToStorage(p, "/" + cardCount + "profile", imgUrl);
                icon.setIcon(img);
            } catch (Exception e) {
                FontImage.setMaterialIcon(icon, FontImage.MATERIAL_LINK);
            }
        } else {
            try {
                EncodedImage p = EncodedImage.createFromImage(Image.createImage(100, 100, 0xffff0000), true);
                URLImage img = URLImage.createToStorage(p, "/" + cardCount + url, "https://dev.lemmy.ml/pictshare/192/" + url);
                icon.setIcon(img);
            } catch (Exception e) {
                FontImage.setMaterialIcon(icon, FontImage.MATERIAL_LINK);
            }
        }
        //c.add(BorderLayout.WEST, new SpanLabel(FontImage.MATERIAL_LINK+""));
        icon.setSize(new Dimension(300, 300));
        c.add(BorderLayout.WEST, icon);
        
        
        SpanLabel name = new SpanLabel(title);
        name.setUnselectedStyle(card_style);
        name.setSelectedStyle(card_style);
        c.add(BorderLayout.CENTER, name);
        
        
        feed.add(c);
        //c.animateLayoutFade(1, 0);
        cardBg = !cardBg;
        cardCount++;
    }
    
    protected static void reorderComments(){
        LinkedList<Comment> parents = new LinkedList<>();
        HashMap<Integer, LinkedList<Comment>> children = new HashMap<>();
        for(Comment i : comments){
            if(i.parent == -1){
                parents.add(i);
            }
            else{
                LinkedList<Comment> list = children.get(i.parent);
                if(list == null){
                    list = new LinkedList<>();
                }
                list.add(i);
                children.put(i.parent, list);
            }
        }
        commentView.removeAll();
        for(Comment i : parents){
            commentView.add(i);
        }
    }
    
    protected static void addCommentCard(String title, LinkedHashMap raw){
        Comment c = new Comment(raw);
        commentView.add(c);
        comments.add(c);
        reorderComments();
        cardCount++;
    }
    
    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }
    
    
     String showdown = "";
}
class customSock extends WebSocket{
    boolean disconnectOnReceive;
    
    Map<String, Object> args;
    public customSock(String url, Map<String, Object> args, String op, boolean disconnectOnReceive) {
        super(url);
        this.args = args;
        this.op = op;
        this.disconnectOnReceive = disconnectOnReceive;
    }
            
            
    
            
    String op = "GetPosts";
    @Override
    protected void onOpen() {
        System.out.println("Websocket opened!");
        System.out.println("Making request...");
        JSONParser.setIncludeNulls(false);
        /*Map<String,Object> arg = new HashMap();
        arg.put("op", op);
            Map<String,String> inpData = new HashMap<>();
            inpData.put("type_", "All");
            inpData.put("sort", "TopAll");
            arg.put("data", inpData);*/
        
        System.out.println(JSONParser.mapToJson(args));
        String q2 = JSONParser.mapToJson(args);
        String q = clean(q2);
        //q = "{\"op\": \"GetPosts\", \"data\": {\"type_\": \"All\", \"sort\": \"TopAll\"}}";
        System.out.println(q);
        JSONParser.setIncludeNulls(false);
        this.send(q);
    }
    String clean(String i){
        String q = "";
        char lastC = ' ';
        char next = ' ';
        int ind = 0;
        for(char c : i.toCharArray()){
            boolean ensurefirst = ind == 0 && c == '"';
            boolean ensurelast = ind == i.length()-1 && c == '"';
            boolean Escape = c == '\\';


            if ( (!ensurefirst) && (!ensurelast)) {
                q = q + c;
            }
            lastC = c;
            ind++;
        }
        return q;
    }
    @Override
    protected void onClose(int arg0, String arg1) {
        System.out.println("Websocket closed!");
    }

    @Override
    protected void onMessage(String arg0) {
        //System.out.println("Raw data: " + arg0);
        Reader i = new StringReader(arg0);
        JSONParser parser = new JSONParser();
        try {
            Map<String, Object> message = parser.parseJSON(i);
            Map<String, Object> data = (Map<String, Object>) message.get("data");
            if(!message.get("op").equals(op)){
                throw new Exception("Operation \"" + message.get("op") + "\" not expexted.");
            }
            if("GetPosts".equals(op)){
                ArrayList posts = (ArrayList) data.get("posts");
                LemmyMain.feed.removeAll();
                for(Object meta : posts){
                    //System.out.println(title);
                    LinkedHashMap post = (LinkedHashMap) meta;

                    //LemmyMain.feed.add(new SpanLabel( (String) post.get("name")));
                    System.out.println("Post keys: " + post.keySet());
                    String url = null;
                    try {
                        url = (String) post.get("thumbnail_url");
                        if("null".equals(url) || post.get("thumbnail_url") == null){
                            url = null;
                            throw new Exception("That's a null!");
                        }
                        System.out.println("Thumb Url: " + url);
                    } catch (Exception e) {
                        System.out.println("Post has no thumbnail!");
                    }
                    addPostCard((String) post.get("name"), url, post);
                    //break;
                    LemmyMain.feed.repaint();
                    LemmyMain.feed.show();
                }
            }
            else if("GetPost".equals(op)){
                ArrayList posts = (ArrayList) data.get("comments");
                LemmyMain.commentView.removeAll();
                LemmyMain.comments = new LinkedList<>();
                for(Object meta : posts){
                    //System.out.println(title);
                    LinkedHashMap comment = (LinkedHashMap) meta;

                    //LemmyMain.feed.add(new SpanLabel( (String) post.get("name")));
                    System.out.println("Comment keys: " + comment.keySet());
                    addCommentCard((String) comment.get("content"), comment);
                    //break;
                    LemmyMain.commentView.repaint();
                    LemmyMain.postView.repaint();
                    LemmyMain.postView.show();
                    //LemmyMain.commentView.show();
                }
            }
        } catch (Exception ex) {
            System.out.println("Invalid message received: " + arg0 + ".\nError: " + ex);
        }
    }

    @Override
    protected void onMessage(byte[] arg0) {
        System.out.println("Incoming data: " + arg0);
    }

    @Override
    protected void onError(Exception arg0) {
        System.out.println("Error: " + arg0);
    }
}